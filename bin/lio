#!/usr/bin/env php
<?php
if (file_exists(dirname(__DIR__, 3) . '/autoload.php')) {
    require_once dirname(__DIR__, 3) . '/autoload.php';
} else {
    require_once dirname(__DIR__) . '/vendor/autoload.php';
}

use Lio\App\Commands\AppRestores\AppRestoresDeleteCommand;
use Lio\App\Commands\AppRestores\AppRestoresDescribeCommand;
use Lio\App\Commands\AppRestores\AppRestoresListCommand;
use Lio\App\Commands\AppRestores\AppRestoresNewCommand;
use Lio\App\Commands\Apps\SubCommands\AppUpdatesStatusCommand;
use Lio\App\Commands\Deploy\DeployListCommand;
use Lio\App\Commands\Organizations\OrganizationsListCommand;
use Lio\App\Commands\Organizations\OrganizationsUpdateCommand;
use Lio\App\Commands\OrganizationUsers\OrganizationUsersDescribeCommand;
use Lio\App\Commands\OrganizationUsers\OrganizationUsersListCommand;
use Lio\App\Commands\OrganizationUsers\OrganizationUsersUpdateCommand;
use Lio\App\Commands\Tokens\TokensDeleteCommand;
use Lio\App\Commands\Tokens\TokensDescribeCommand;
use Lio\App\Commands\Tokens\TokensListCommand;
use Lio\App\Commands\Tokens\TokensNewCommand;
use Lio\App\Commands\DbRestores\DbRestoresDeleteCommand;
use Lio\App\Commands\DbRestores\DbRestoresDescribeCommand;
use Lio\App\Commands\DbRestores\DbRestoresListCommand;
use Lio\App\Commands\DbRestores\DbRestoresNewCommand;
use Lio\App\Commands\DbBackups\DbBackupsDeleteCommand;
use Lio\App\Commands\DbBackups\DbBackupsDescribeCommand;
use Lio\App\Commands\DbBackups\DbBackupsListCommand;
use Lio\App\Commands\DbBackups\DbBackupsNewCommand;
use Lio\App\Commands\Files\SubCommands\FilesUpdateFetchCommand;
use Lio\App\Commands\Files\SubCommands\FilesUpdateMoveCommand;
use Lio\App\Commands\Logs\LogsListCommand;
use Lio\App\Commands\Tokens\TokensUpdateCommand;
use Symfony\Component\Console\Application;
use Lio\App\Commands\Apps\AppsDescribeCommand;
use Lio\App\Commands\Apps\AppsListCommand;
use Lio\App\Commands\AuthCommand;
use Lio\App\Commands\Apps\AppsNewCommand;
use GuzzleHttp\Client;
use Lio\App\Commands\Files\FilesListCommand;
use Lio\App\Commands\Apps\AppsDeleteCommand;
use Lio\App\Commands\Files\FilesUploadCommand;
use Lio\App\Commands\SelfUpdateCommand;
use Lio\App\Commands\Files\FilesDeleteCommand;
use Lio\App\Commands\Apps\AppsUpdateCommand;
use Lio\App\Commands\AppBackups\AppBackupsNewCommand;
use Lio\App\Commands\Files\FilesUpdateCommand;
use Lio\App\Commands\AppBackups\AppBackupsDescribeCommand;
use Lio\App\Commands\AppBackups\AppBackupsDownloadCommand;
use Lio\App\Commands\AppBackups\AppBackupsDeleteCommand;
use Lio\App\Commands\AppBackups\AppBackupsListCommand;
use Lio\App\Commands\Users\UsersListCommand;
use Lio\App\Commands\Files\FilesDownloadCommand;
use Lio\App\Commands\DeployCommand;
use Lio\App\Commands\AppRuns\AppRunsNewCommand;
use Lio\App\Commands\AppRuns\AppRunsDescribeCommand;
use Lio\App\Commands\Files\SubCommands\FilesUpdateUnarchiveCommand;
use Lio\App\Commands\Databases\DatabasesNewCommand;
use Lio\App\Commands\Databases\DatabasesDescribeCommand;
use Lio\App\Commands\Databases\DatabasesDeleteCommand;
use Lio\App\Commands\Databases\DatabasesListCommand;
use Lio\App\Commands\Databases\DatabasesUpdateCommand;
use Lio\App\Commands\AppRuns\AppRunsListCommand;
use Lio\App\Commands\AppRuns\AppRunsDeleteCommand;

try {
    $app = new Application('lamp.io commandline interface');
    $app->add(new AppsListCommand(new Client()));
    $app->add(new AppsDescribeCommand(new Client()));
    $app->add(new AppsNewCommand(new Client()));
    $app->add(new AuthCommand());
    $app->add(new FilesListCommand(new Client()));
    $app->add(new AppsDeleteCommand(new Client()));
    $app->add(new FilesUploadCommand(new Client()));
    $app->add(new SelfUpdateCommand());
    $app->add(new AppsUpdateCommand(new Client()));
    $app->add(new AppBackupsNewCommand(new Client()));
    $app->add(new FilesUpdateCommand(new Client()));
    $app->add(new AppsDeleteCommand(new Client()));
    $app->add(new FilesDeleteCommand(new Client()));
    $app->add(new FilesDownloadCommand(new Client()));
    $app->add(new UsersListCommand(new Client()));
    $app->add(new AppBackupsListCommand(new Client()));
    $app->add(new AppBackupsDescribeCommand(new Client()));
    $app->add(new AppBackupsDownloadCommand(new Client()));
    $app->add(new AppBackupsDeleteCommand(new Client()));
    $app->add(new DeployCommand(new Client()));
    $app->add(new AppRunsNewCommand(new Client()));
    $app->add(new AppRunsDescribeCommand(new Client()));
    $app->add(new FilesUpdateUnarchiveCommand(new Client()));
    $app->add(new AppRunsListCommand(new Client()));
    $app->add(new AppRunsDeleteCommand(new Client()));
    $app->add(new DatabasesNewCommand(new Client()));
    $app->add(new DatabasesDescribeCommand(new Client()));
    $app->add(new DatabasesDeleteCommand(new Client()));
    $app->add(new DatabasesListCommand(new Client()));
    $app->add(new DatabasesUpdateCommand(new Client()));
    $app->add(new DbBackupsNewCommand(new Client()));
    $app->add(new DbBackupsListCommand(new Client()));
    $app->add(new DbBackupsDescribeCommand(new Client()));
    $app->add(new DbBackupsDeleteCommand(new Client()));
    $app->add(new DbRestoresNewCommand(new Client()));
    $app->add(new DbRestoresListCommand(new Client()));
    $app->add(new DbRestoresDescribeCommand(new Client()));
    $app->add(new DbRestoresDeleteCommand(new Client()));
    $app->add(new LogsListCommand(new Client()));
    $app->add(new FilesUpdateFetchCommand(new Client()));
    $app->add(new FilesUpdateMoveCommand(new Client()));
    $app->add(new AppUpdatesStatusCommand(new Client()));
    $app->add(new OrganizationsListCommand(new Client()));
    $app->add(new OrganizationsUpdateCommand(new Client()));
    $app->add(new TokensNewCommand(new Client()));
    $app->add(new OrganizationsListCommand(new Client()));
    $app->add(new OrganizationsUpdateCommand(new Client()));
    $app->add(new TokensNewCommand(new Client()));
    $app->add(new TokensListCommand(new Client()));
    $app->add(new TokensDescribeCommand(new Client()));
    $app->add(new TokensDeleteCommand(new Client()));
    $app->add(new TokensUpdateCommand(new Client()));
    $app->add(new OrganizationUsersListCommand(new Client()));
    $app->add(new OrganizationUsersDescribeCommand(new Client()));
    $app->add(new OrganizationUsersUpdateCommand(new Client()));
    $app->add(new DeployListCommand(new Client()));
    $app->add(new AppRestoresNewCommand(new Client()));
    $app->add(new AppRestoresListCommand(new Client()));
    $app->add(new AppRestoresDescribeCommand(new Client()));
    $app->add(new AppRestoresDeleteCommand(new Client()));
    $app->run();
} catch (Exception $exception) {
    echo $exception->getMessage() . PHP_EOL;
    exit(1);
}